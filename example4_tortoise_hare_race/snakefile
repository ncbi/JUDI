import pandas as pd
from utils import Paramspace


racer = Paramspace(
    pd.DataFrame(
        {'game': [1,1,2,2],
         'racer': ['tortoise','hare','tortoise','hare']}
    ).set_index("game", drop=False)
)

rule all:
    input:
        expand("combined_csv/{params}.csv", params=game.instance_patterns)


rule simulate:
    output:
        f"csv/{racer.wildcard_pattern}.csv"
    params:
        simulation=racer.instance
    shell:
        "cp {params.simulation.racer}_{params.simulation.game}.csv {output}"


rule combine:
    input:
        # Here we constrain the paramspace to the game chosen via the wildcard of the output file.
        # For such wildcard-value dependent decisions, Snakemake allows to use Python functions or 
        # lambda expressions, which are evaluated for each job.
        lambda wildcards: expand("csv/{params}.csv", params=racer.loc[int(wildcards.game)].instance_patterns)
    output:
        f"combined_csv/{game}.csv"
    run:
        print(input)
        print(output)
        df = pd.concat([pd.read_csv(in_for_hare),
                        pd.read_csv(in_for_tortoise)],
                       keys = ['hare', 'tortoise'],
                       names = ['racer'])
        df.to_csv(output)
